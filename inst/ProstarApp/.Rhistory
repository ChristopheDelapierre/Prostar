)
)
ui <- dashboardPage(
dashboardHeader(
dropdownActionMenu(title="Menu",
actionItem("mnuFirst","Main"),
actionItem("mnuSecond","OAC"),
actionItem("mnuFirst","COAD")
)
),
dashboardSidebar(width = 150,
sidebarMenu(
menuItem("Dashboard", tabName = "main", icon = icon("dashboard")),
menuItem("COAD", tabName = "COAD", icon = icon("venus-mars"),dropdownActionMenu(title="Patients",
actionItem("mnuFirst","005"),
actionItem("mnuSecond","036"),
actionItem("mnuFirst","013"),
actionItem("mnuSecond","036")
)),
menuItem("OAC", tabName = "OAC", icon = icon("venus-mars"),dropdownActionMenu(title="Patients",
actionItem("mnuFirst","005"),
actionItem("mnuSecond","036"),
actionItem("mnuFirst","013"),
actionItem("mnuSecond","036")
))
)),
dashboardBody(
tabItems(bodyHome)
)
)
server <- function(input, output, session){
output$Table1 <- DT::renderDataTable({
datatable(iris)
})
}
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
library(shinyjs)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody(
# initialize shinyjs
shinyjs::useShinyjs(),
# add custom JS code
extendShinyjs(text = "shinyjs.hidehead = function(parm){
$('header').css('display', parm);
}"),
actionButton("button","hide header"),
actionButton("button2","show header")
)
)
server <- function(input, output) {
observeEvent(input$button, {
js$hidehead('none')
})
observeEvent(input$button2, {
js$hidehead('')
})
}
shinyApp(ui, server)
runApp('Test_DB/inst/ProstarApp')
runApp('Test_DB/inst/ProstarApp')
shiny::runApp('Test_DB/inst/ProstarApp')
runApp('~/Github/Prostar_master/inst/ProstarApp')
fichiers <- list.files("~/Github/Prostar_master/inst/ProstarApp/characters/")
for (f in fichiers) {
print(f)
source(paste0("~/Github/Prostar_master/inst/ProstarApp/characters/",f))
}
runApp('Prostar_master/inst/ProstarApp')
runApp('~/Github/Test_DB/inst/ProstarApp')
runApp('Test_DB/inst/ProstarApp')
shiny::runApp('Test_DB/inst/ProstarApp')
runApp('Test_DB/inst/ProstarApp')
library(shinythemes)
runApp('Test_DB/inst/ProstarApp')
library(shinyWidgets)
runApp('Test_DB/inst/ProstarApp')
shinyWidgetsGallery()
runApp('Test_DB/inst/ProstarApp')
shinyWidgetsGallery()
runApp('~/Github/Test_DB/inst/ProstarApp')
runApp('Test_DB/inst/ProstarApp')
shinydashboardPlusGallery()
runApp('Test_DB/inst/ProstarApp')
runApp('Test_DB/inst/ProstarApp')
shinydashboardPlusGallery()
runApp('Test_DB/inst/ProstarApp')
runApp('Test_DB/inst/ProstarApp')
runApp('Test_DB/inst/ProstarApp')
shiny::runApp('Test_DB/inst/ProstarApp')
runApp('Test_DB/inst/ProstarApp')
runApp('Test_DB/inst/ProstarApp')
runApp('Test_DB/inst/ProstarApp')
shinyWidgetsGallery()
runApp('~/Github/Test_DB/inst/ProstarApp')
runApp('Test_DB/inst/ProstarApp')
shiny::runApp('Test_DB/inst/ProstarApp')
install.packages("UpSetR")
library(UpSetR)
upsetSample(miniACC)
upsetSamples(miniACC)
BiocManager::install("MultiAssayExperiment")
library(MultiAssayExperiment)
library(GenomicRanges)
library(SummarizedExperiment)
library(RaggedExperiment)
BiocManager::install("RaggedExperiment")
library(RaggedExperiment)
library(UpSetR)
upsetSamples(miniACC)
class(miniACC)
summary(miniACC)
summary(miniACC)
summary(miniACC)
dataset <- miniACC
rm(dataset)
miniACC <- miniACC
colData(miniACC)
head(colData(miniACC))
empty <- MultiAssayExperiment()
rm(miniACC)
empty
slotNames(empty)
class(empty)
class(experiments(empty))
head(colData(empty))
head(colData(miniACC))
head(experiments(miniACC))
miniACC[["gistic"]]
miniACC[[1:5],,]
head(experiments(miniACC))
head(sampleMap(miniACC))
head(experiments(miniACC)[1])
head(experiments(miniACC)[[1]])
head((experiments(miniACC))[[1]])
miniACC[,,"Mutations"]
shiny::runApp('Prostar/inst/ProstarApp')
library(devtools)
devtools::install_github("cb4ds/periscope")
library(periscope)
library(devtools)
devtools::install_github("cb4ds/periscope")
library(devtools)
devtools::install_github("cb4ds/periscope")
devtools::install_github("cb4ds/periscope")
install.packages("digest")
devtools::install_github("cb4ds/periscope")
library(devtools)
devtools::install_github("cb4ds/periscope")
library(periscope)
create_new_application("sampleapp2", location = tempdir(), sampleapp = TRUE, rightsidebar = TRUE)
runApp('sampleapp2')
library(shiny)
create_new_application("sampleapp2", location = tempdir(), sampleapp = TRUE, rightsidebar = TRUE)
runApp('sampleapp2')
create_new_application("sampleapp1", location = tempdir(), sampleapp = TRUE)
runApp('sampleapp1')
getwd()
vignette(periscope)
vignette("periscope")
appDir = tempdir()
runApp('sampleapp1', appDir = appDir)
create_new_application(name = "sampleapp1", location = appDir, sampleapp = TRUE)
library(shiny)
library(devtools)
shinyApp(ui = ui, server = server)
library(shiny)
library(tidyverse)
ui <- fluidPage(
mainPanel(
radioButtons("thresholds", "Thresholds",
c("high", "low"), selected = "high"),
conditionalPanel(
condition = "input.thresholds == 'high'",
selectInput('test', 'test',
cars %>% filter(speed >= 14) %>% pull(speed),
multiple = TRUE, selectize = FALSE, width = 300, size = 20)),
conditionalPanel(
condition = "input.thresholds == 'low'",
selectInput('test2', 'test',
cars %>% filter(speed < 14) %>% pull(speed),
multiple = TRUE, selectize = FALSE, width = 300, size = 20)),
verbatimTextOutput('out1')))
ui <- fluidPage(
mainPanel(
radioButtons("thresholds", "Thresholds",
c("high", "low"), selected = "high"),
conditionalPanel(
condition = "input.thresholds == 'high'",
selectInput('test', 'test',
cars %>% filter(speed >= 14) %>% pull(speed),
multiple = TRUE, selectize = FALSE, width = 300, size = 20)),
conditionalPanel(
condition = "input.thresholds == 'low'",
selectInput('test2', 'test',
cars %>% filter(speed < 14) %>% pull(speed),
multiple = TRUE, selectize = FALSE, width = 300, size = 20)),
verbatimTextOutput('out1')))
server <- function(input, output) {
output$out1 <- renderPrint(if (input$thresholds == "high") input$test else input$test2)
}
shinyApp(ui = ui, server = server)
runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
shiny::runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
runApp()
runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
inputUser<- ";"
separators <- c(' ', '.', ",", "_", ";", "-")
separators
separators <- separators[-which(inputUser == separators)]
separators
sepToCheck <- character()
for (i in separators) {
sepToCheck <- paste0( sepToCheck, gsub('"',"",i),"|" )
}
sepToCheck
sepToCheck <- substr(sepToCheck,1,nchar(sepToCheck)-1)
sepToCheck
sepToCheck <- gsub("\\.", "\\\\.", sepToCheck)
sepToCheck
liste <- sapply(col, function(x) strsplit(x, sepToCheck))
sepToCheck
runApp('master/Prostar/inst/ProstarApp')
runApp()
runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
liste
inputUser <- ';'
data <- readExcel("~/data/Mock vs HIV 8 x 8 2018 ttt 2019 Uniq txt HYPOTHESIS..xlsx")
data <- readExcel("~/data/Mock vs HIV 8 x 8 2018 ttt 2019 Uniq txt HYPOTHESIS..xlsx", sheet = "Quantitative Data")
View(data)
liste <- sapply(data$ID, function(x) strsplit(x, sepToCheck))
liste
which(lengths(liste)>1)
which(lengths(liste)>0)
liste
sepToCheck
liste <- sapply(data$ID, function(x) strsplit(x, sepToCheck))
liste
inputUser <- ","
liste <- sapply(data$ID, function(x) strsplit(x, sepToCheck))
liste
data <- data$ID
data
sepToCheck
separators <- c(' ', '.', ",", ";", "-")
sepToCheck <- character()
for (i in separators) {
sepToCheck <- paste0( sepToCheck, gsub('"',"",i),"|" )
}
sepToCheck <- substr(sepToCheck,1,nchar(sepToCheck)-1)
sepToCheck <- gsub("\\.", "\\\\.", sepToCheck)
sepToCheck
sapply(data, function(x) strsplit(x, sepToCheck))
liste <- sapply(data, function(x) strsplit(x, sepToCheck))
subliste <- liste[which(lengths(liste)>1)]
subliste
names(subliste)
separators
which(separators %in% names(subliste))
separators
names(subliste)
sapply(names(subliste), function(x) which(separators %in% x))
which(separators %in% names(subliste)[1])
separators
names(subliste)[1]
";" %in% "P0DPI2;A0A0B4J2D5"
sapply(names(subliste), function(x) intersect(separators, x))
intersect(separators, names(subliste))
separators
match(separators, names(subliste))
match(names(subliste), separators)
Position(names(subliste), separators)
separators %in% names(subliste)
names(subliste) %in% separators
separators
names(subliste)
names(subliste)[1] %in% separators
separators %in% names(subliste)[1]
separators %in% "Q9Y696;O15247;Q9NZA1;Q96NY7"
c(',',':',';') %in% "Q9Y696;O15247;Q9NZA1;Q96NY7"
library(stringr)
str_detect("Q9Y696;O15247;Q9NZA1;Q96NY7", c(',',':',';'))
str_detect("Q9Y696;O15247;Q9NZA1;Q96NY7", separators)
separators
"." %in% "Q9Y696;O15247;Q9NZA1;Q96NY7"
str_detect(names(subliste), separators)
liste
subliste <- liste[lengths(liste)>1]
subliste
head(subliste)
length(subliste)
listeSepPLus <- c()
runApp('master/Prostar/inst/ProstarApp')
separators
sepToCheck <- character()
for (i in separators) {
sepToCheck <- paste0( sepToCheck, gsub('"',"",i),"|" )
}
sepToCheck <- substr(sepToCheck,1,nchar(sepToCheck)-1)
sepToCheck <- gsub("\\.", "\\\\.", sepToCheck)
liste <- sapply(data, function(x) strsplit(x, sepToCheck))
liste
subliste <- liste[lengths(liste)>1]
subliste
listeSepPLus <- c()
i=1
separators
names(subliste)[i]
(separators %in% names(subliste)[i])
separators
(str_detect(names(subliste)[i], separators))
listeSepPLus
separators[str_detect(names(subliste)[i], separators)]
(separators %in% names(subliste)[i])
separators
names(subliste)[i]
intersect(separators,names(subliste)[i])
match(separators,names(subliste)[i])
class(separators)
class(names(subliste)[i])
intersect(strsplit("",separators),strsplit("",names(subliste)[i]))
strsplit("",names(subliste)[i])
intersect(strsplit(separators,""),strsplit(names(subliste)[i],""))
strsplit(names(subliste)[i],"")
strsplit(separators),"")
strsplit((separators),"")
unlist(strsplit((separators),""))
intersect(unlist(strsplit(separators,"")),strsplit(names(subliste)[i],""))
strsplit(names(subliste)[i],"")
intersect(unlist(strsplit(separators,"")),unlist(strsplit(names(subliste)[i],"")))
separators <- c(' ', '.', ",", ";", "-")
sepToCheck <- character()
for (i in separators) {
sepToCheck <- paste0( sepToCheck, gsub('"',"",i),"|" )
}
sepToCheck <- substr(sepToCheck,1,nchar(sepToCheck)-1)
sepToCheck <- gsub("\\.", "\\\\.", sepToCheck)
sepToCheck
liste <- sapply(rv$tab1[,rv$widgets$Convert$convert_proteinId], function(x) strsplit(x, sepToCheck))
subliste
listeSepPLus <- c()
i=1
listeSepPLus <- c(listeSepPLus, intersect(unlist(strsplit(separators,"")),unlist(strsplit(names(subliste)[i],""))))
listeSepPLus
i=2
listeSepPLus <- c(listeSepPLus, intersect(unlist(strsplit(separators,"")),unlist(strsplit(names(subliste)[i],""))))
listeSepPLus
unique(listeSepPLus)
listeSepPLus <- c()
for (i in 1:length(subliste)){
listeSepPLus <- c(listeSepPLus, intersect(unlist(strsplit(separators,"")),unlist(strsplit(names(subliste)[i],""))))
}
listeSepPLus
(length(listeSepPLus)>0)
text <- paste0("<font color=\"red\"> Others separators (",unique(listeSepPLus), ") exist." )
text
runApp('master/Prostar/inst/ProstarApp')
shiny::runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
listeSepPLus
unique(listeSepPLus)
data <- readExcel("~/data/Mock vs HIV 8 x 8 2018 ttt 2019 Uniq txt HYPOTHESIS..xlsx", sheet = "Quantitative Data")
data <- data$ID
sepToCheck
liste <- sapply(data, function(x) strsplit(x, sepToCheck))
liste
subliste <- liste[lengths(liste)>1]
subliste
listeSepPLus <- c()
for (i in 1:length(subliste)){
listeSepPLus <- c(listeSepPLus, intersect(unlist(strsplit(separators,"")),unlist(strsplit(names(subliste)[i],""))))
}
listeSepPLus
unique(listeSepPLus)
paste0("Others separators (",unique(listeSepPLus), ") found!" )
paste0("Others separators (",c(unique(listeSepPLus)), ") found!" )
listeSepPLus
unique(listeSepPLus)
class(unique(listeSepPLus))
unlist(unique(listeSepPLus))
paste0("Others separators (",c(unlist(unique(listeSepPLus))), ") found!" )
paste("Others separators (",c(unlist(unique(listeSepPLus))), ") found!", sep = "")
paste0("Others separators (",c(unlist(unique(listeSepPLus))), ") found!", collapse = T)
paste0("Others separators (",c(unlist(unique(listeSepPLus))), ") found!", collapse = "")
paste("Others separators (",c(unlist(unique(listeSepPLus))), ") found!", collapse = "")
cat("Others separators (",c(unlist(unique(listeSepPLus))), ") found!")
runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
runApp()
runApp('master/Prostar/inst/ProstarApp')
shiny::runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
inputUser
inputUser
separators
separators <- c(' ', '.', ",", ";", "-")
inputUser <- "_"
(!(inputUser %in% separators))
(inputUser %in% separators)
inputUser
separators
if (!(inputUser %in% separators)) {
separators <- unique(c(separators,inputUser))
}
separators
inputUser <- ";"
(!(inputUser %in% separators))
separators <- separators[-which(inputUser == separators)]
separators
runApp('master/Prostar/inst/ProstarApp')
inputUser<- "_"
separators <- c(' ', '.', ",", ";", "-",'')
separators <- separators[-which(inputUser == separators)]
separators
separators
separators <- c(' ', '.', ",", ";", "-",'')
separators
separators <- separators[-which(inputUser == separators)]
separators
separators <- c(' ', '.', ",", ";", "-",'')
separators[-which(inputUser == separators)]
which(inputUser == separators)
separators
separators[-which(inputUser == separators)]
(which(inputUser == separators))
(length(which(inputUser == separators))>1)
inputUser<- "-"
separators <- c(' ', '.', ",", ";", "-",'')
(length(which(inputUser == separators))>1)
(length(which(inputUser == separators))>=1)
runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
shiny::runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
shiny::runApp('master/Prostar/inst/ProstarApp')
shiny::runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
data <- readExcel("~/data/pept/__toto..xlsx", sheet = "Feature Meta Data" )
library(DAPAR)
data <- readExcel("~/data/pept/__toto..xlsx", sheet = "Feature Meta Data" )
datat <- data$Proteins
which(is.na(data))
data
data <- data$Proteins
which(is.na(data))
which(data == "")
which(data == " ")
rm(datat)
data <- readExcel("~/data/pept/__toto..xlsx", sheet = "Feature Meta Data" )
View(data)
which(is.na(data$Proteins))
length(index)
index <- which(is.na(data$Proteins)) # && which(data$Proteins == "")
length(index)
if (length(index)>0) {
paste0(length(index), "peptides don't have parent protein")
}
if (length(index)>0) {
paste0(length(index), " peptides don't have parent protein")
}
shiny::runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
runApp()
runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
runApp()
runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
shinydashboardPlusGallery()
library(shiny)
library(shinydashboard)
library(shinydashboardPlus)
library(shinyjs)
library(shinyjqui)
library(sass)
library(shinyWidgets)
shinydashboardPlusGallery()
shinyWidgetsGallery()
runApp('~/Github/master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
runApp()
runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
library(shiny)
runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
shiny::runApp('master/Prostar/inst/ProstarApp')
runApp('master/Prostar/inst/ProstarApp')
