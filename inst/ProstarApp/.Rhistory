rv$widgets$normalization$type
class(rv$widgets$normalization$type)
rv$widgets$normalization$varReduction
class(rv$widgets$normalization$varReduction)
quant
as.numeric(rv$widgets$normalization$quantile)
class(as.numeric(rv$widgets$normalization$quantile))
as.numeric(input$spanLOESS)
class(as.numeric(input$spanLOESS))
GetIndicesOfSelectedProteins()
n
shiny::runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
rv.norm$trackFromBoxplot()
(rv.norm$trackFromBoxplot()$type)
Biobase::fData(rv$current.obj)[,rv$current.obj@experimentData@other$proteinId]
rv.norm$trackFromBoxplot()$type
rv.norm$trackFromBoxplot()$list.indices
rv.norm$trackFromBoxplot()
is.null(rv.norm$trackFromBoxplot()$type)
rv.norm$trackFromBoxplot()$type
ind
ll
tt
ProteinList
Random
ind
ind
length(ind)==0
ind
ind
runApp('Prostar/inst/ProstarApp')
runApp()
runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
print(input$typeSelect)
runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
shiny::runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
shiny::runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
rv$matAdj
runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
shiny::runApp()
runApp()
rv$imputePlotsSteps[["step0"]]
length(which(is.na(Biobase::exprs(rv$current.obj))==TRUE))
rv$widgets$proteinImput$POV_algorithm
findMECBlock(rv$current.obj)
rv$MECIndex
rv$current.obj
nbMVBefore
rv$MECIndex
rv$current.obj
rv$current.obj
nbMVAfter
rv$nbPOVimputed
nbMVBefore
nbMVAfter
rv$imputePlotsSteps[["step1"]]
shiny::runApp()
runApp()
rv$widgets$proteinImput$POV_algorithm
nbMVAfter
rv$nbPOVimputed
algo
shiny::runApp()
runApp()
fichiers <- list.files("~/Github/Prostar_master/inst/ProstarApp/characters/")
for (f in fichiers) {
print(f)
source(paste0("~/Github/Prostar_master/inst/ProstarApp/characters/",f))
}
runApp()
fichiers <- list.files("~/Github/master/Prostar/inst/ProstarApp/characters/")
for (f in fichiers) {
print(f)
source(paste0("~/Github/master/Prostar/inst/ProstarApp/characters/",f))
}
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source('~/Github/master/Prostar/inst/ProstarApp/server/srv_ModulesSrv.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
fichiers <- list.files("~/Github/master/Prostar/inst/ProstarApp/characters/")
for (f in fichiers) {
print(f)
source(paste0("~/Github/master/Prostar/inst/ProstarApp/characters/",f))
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
fichiers <- list.files("~/Github/master/Prostar/inst/ProstarApp/characters/")
for (f in fichiers) {
print(f)
source(paste0("~/Github/master/Prostar/inst/ProstarApp/characters/",f))
}
runApp()
fichiers <- list.files("~/Github/master/Prostar/inst/ProstarApp/characters/")
for (f in fichiers) {
print(f)
source(paste0("~/Github/master/Prostar/inst/ProstarApp/characters/",f))
}
runApp()
runApp()
fichiers <- list.files("~/Github/master/Prostar/inst/ProstarApp/characters/")
for (f in fichiers) {
print(f)
source(paste0("~/Github/master/Prostar/inst/ProstarApp/characters/",f))
}
fichiers <- list.files("~/Github/master/Prostar_char/inst/ProstarApp/characters/")
for (f in fichiers) {
print(f)
source(paste0("~/Github/master/Prostar_char/inst/ProstarApp/characters/",f))
}
shiny::runApp()
runApp()
runApp()
runApp('~/Github/master/Prostar/inst/ProstarApp')
runApp('~/Github/master/Prostar/inst/ProstarApp')
runApp('~/Github/master/Prostar/inst/ProstarApp')
runApp('~/Github/master/Prostar/inst/ProstarApp')
runApp('~/Github/master/Prostar/inst/ProstarApp')
runApp('~/Github/master/Prostar/inst/ProstarApp')
runApp('~/Github/master/Prostar/inst/ProstarApp')
runApp('~/Github/master/Prostar/inst/ProstarApp')
runApp('~/Github/master/Prostar/inst/ProstarApp')
runApp('~/Github/master/Prostar/inst/ProstarApp')
runApp()
shiny::runApp('~/Github/master/Prostar/inst/ProstarApp')
runApp('~/Github/master/Prostar/inst/ProstarApp')
runApp('~/Github/master/Prostar/inst/ProstarApp')
runApp('~/Github/master/Prostar/inst/ProstarApp')
runApp('~/Github/master/Prostar/inst/ProstarApp')
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
p("The checkbox group controls the select input"),
checkboxGroupInput("inCheckboxGroup", "Input checkbox",
c("Item A", "Item B", "Item C")),
selectInput("inSelect", "Select input",
c("Item A", "Item B", "Item C"))
)
server <- function(input, output, session) {
observe({
x <- input$inCheckboxGroup
# Can use character(0) to remove all choices
if (is.null(x))
x <- character(0)
# Can also set the label and select items
updateSelectInput(session, "inSelect",
label = paste("Select input label", length(x)),
choices = x,
selected = tail(x, 1)
)
})
}
shinyApp(ui, server)
runApp('~/Github/master/Prostar/inst/ProstarApp')
runApp('~/Github/master/Prostar/inst/ProstarApp')
runApp()
runApp('~/Github/master/Prostar/inst/ProstarApp')
shiny::runApp()
runApp()
runApp()
runApp()
ui <- fluidPage(
textInput("caption", "Caption", "Data Summary"),
verbatimTextOutput("value")
)
server <- function(input, output) {
output$value <- renderText({ input$caption })
}
shinyApp(ui, server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
col <- read.csv("~/data/Classeur1.txt", sep = "\t", h = F)
col
col <- col[,1]
col
col <- read.csv("~/data/Classeur1.txt", sep = "\t", h = F, stringsAsFactors = F)
col <- col[,1]
col
col <- read.csv("~/data/Classeur1.txt", stringsAsFactors = F)
dim(col)
col <- read.csv("~/data/Classeur1.txt", h=F,stringsAsFactors = F)
dim(col)
col
col <- read.csv("~/data/Classeur1.txt", sep="\t", h=F,stringsAsFactors = F)
col
dim(col)
col <- read.table("~/data/Classeur1.txt", sep="\t", h=F,stringsAsFactors = F)
col
dim(col)
col <- read.table("~/data/Classeur1.txt", sep="\t", h=F,stringsAsFactors = F)
dim(col)
col <- read.table("~/data/Classeur1.txt", sep="\t", h=F,stringsAsFactors = F)
dim(col)
col <- col[,1]
col
which(col=="NA")
which(col=="")
col <- read.table("~/data/Classeur1.txt", sep="\t", h=F,stringsAsFactors = F)
dim(col)
col <- col[,1]
which(col=="" | col == NA)
which(col=="")
which(col == NA)
which(col == "NA")
col
which(is.na(col))
which(col=="" | is.na(col))
is.numeric(col)
which(is.numeric(col))
which(!is.numeric(col))
apply(col, is.numeric)
apply(col, function(x) is.numeric(x))
sapply(col, is.numeric)
sapply(col, is.integer)
class(col[1])
(length(which(col=="" | is.na(col))) > 0)
library(readr)
get.delim(col)
install.packages("reader")
library(reader)
get.delim(col)
get.delim("~/data/Classeur1.txt")
apply(col, 2, function(x) strsplit(x, ','))
apply(col, function(x) strsplit(x, ','))
sapply(col, function(x) strsplit(x, ','))
sapply(col, function(x) strsplit(x, c(' ','.','_',';',',')))
sapply(col, function(x) strsplit(x, ' |.|,|_|;'))
sapply(col, function(x) strsplit(x, ' |\\.|\\,|_|;'))
inputUser <- ","
separators <- c(' ','.',",","_",";")
separators[-inputUser]
separators
inputUser
col <- read.table("~/data/Classeur1.txt", sep="\t", h=F,stringsAsFactors = F)
dim(col)
col <- col[,1]
if (length(which(col=="" | is.na(col))) > 0) {
"Protein ID contains NA or empty values"
}
inputUser <- ","
separators <- c(' ','.',",","_",";")
sepToCheck <- separators[-inputUser]
which(inputUser == separators)
inputUser <- ","
separators <- c(' ','.',",","_",";")
sepToCheck <- separators[-which(inputUser == separators)]
sepToCheck
sapply(col, function(x) strsplit(x, separators))
paste0(sepToCheck)
sepToCheck
separators <- '\\ |\\.|\\,|\\_|\\;'
sapply(col, function(x) strsplit(x, separators))
sepToCheck
sepToCheck
sapply(sepToCheck, function(x) paste0("\\",sepToCheck))
sepToCheck
sepToCheck
separators <- '\\ |\\.|\\,|\\_|\\;|-'
which(inputUser == separators)
inputUser
separators
sepToCheck
sapply(sepToCheck, function(x) replace('"',"\\",x))
separators
paste0("\\",sepToCheck)
sepToCheck
gsub('"',"",paste0("\\",sepToCheck))
paste0("\\",sepToCheck)
paste0("\\",sepToCheck)
separators <- ' |.|,|_|;|-'
sapply(col, function(x) strsplit(x, separators))
separators <- ' |\\.|,|_|;|-'
sapply(col, function(x) strsplit(x, separators))
inputUser <- ","
separators <- c(' ', '.', ",", "_", ";", "-")
separators
separators <- separators[-which(inputUser == separators)]
separators
sepToCheck <- character()
sepToCheck <- character()
for (i in separators) {
print(i)
sepToCheck <- paste0( gsub('"',"",i),"|" )
}
sepToCheck
inputUser <- ","
separators <- c(' ', '.', ",", "_", ";", "-")
separators <- separators[-which(inputUser == separators)]
sepToCheck <- character()
for (i in separators) {
print(i)
sepToCheck <- paste0( sepToCheck, gsub('"',"",i),"|" )
}
print(sepToCheck)
sepToCheck
grep("\\.",sepToCheck)
gsub(".", "\\.", sepToCheck)
gsub("\\.", "\\\\.", sepToCheck)
col <- read.table("~/data/Classeur1.txt", sep="\t", h=F,stringsAsFactors = F)
dim(col)
col <- col[,1]
if (length(which(col=="" | is.na(col))) > 0) {
"Protein ID contains NA or empty values"
}
# check the separators
inputUser <- ","
separators <- c(' ', '.', ",", "_", ";", "-")
separators <- separators[-which(inputUser == separators)]
separators
sepToCheck <- character()
sepToCheck <- sapply(sepToCheck, function(x) paste0( x, gsub('"',"",i),"|" ))
sepToCheck <- character()
sepToCheck
sapply(sepToCheck, function(x) paste0( x, gsub('"',"",i),"|" ))
sepToCheck <- character()
apply(sepToCheck, function(x) paste0( x, gsub('"',"",i),"|" ))
apply(sepToCheck,1, function(x) paste0( x, gsub('"',"",i),"|" ))
lapply(sepToCheck, function(x) paste0( x, gsub('"',"",i),"|" ))
sepToCheck <- character()
lapply(sepToCheck, function(x) gsub('"',"",i) )
sepToCheck <- character()
sapply(sepToCheck, function(x) gsub('"',"",i) )
sepToCheck <- character()
sapply(sepToCheck, function(x) gsub('"',"",x) )
sepToCheck <- character()
sepToCheck
sapply(sepToCheck, function(x) paste0( x, gsub('"',"",x),"|" ) )
sepToCheck <- character()
for (i in separators) {
sepToCheck <- paste0( sepToCheck, gsub('"',"",i),"|" )
}
separators
sepToCheck
sepToCheck <- gsub("\\.", "\\\\.", sepToCheck)
sepToCheck
sapply(col, function(x) strsplit(x, separators))
separators
sapply(col, function(x) strsplit(x, sepToCheck))
sepToCheck
# check the separators
inputUser <- ","
separators <- c(' ', '.', ",", "_", ";", "-")
separators <- separators[-which(inputUser == separators)]
sepToCheck <- character()
for (i in separators) {
sepToCheck <- paste0( sepToCheck, "|", gsub('"',"",i) )
}
sepToCheck <- gsub("\\.", "\\\\.", sepToCheck)
sepToCheck
# check the separators
inputUser <- ","
separators <- c(' ', '.', ",", "_", ";", "-")
col <- read.table("~/data/Classeur1.txt", sep="\t", h=F,stringsAsFactors = F)
dim(col)
col <- col[,1]
# check the separators
inputUser <- ","
separators <- c(' ', '.', ",", "_", ";", "-")
separators <- separators[-which(inputUser == separators)]
sepToCheck <- character()
for (i in separators) {
sepToCheck <- paste0( sepToCheck, gsub('"',"",i),"|" )
}
sepToCheck
sepToCheck <- sepToCheck[-tail(sepToCheck)]
tail(sepToCheck)
col <- read.table("~/data/Classeur1.txt", sep="\t", h=F,stringsAsFactors = F)
dim(col)
col <- col[,1]
# check the separators
inputUser <- ","
separators <- c(' ', '.', ",", "_", ";", "-")
separators <- separators[-which(inputUser == separators)]
sepToCheck <- character()
for (i in separators) {
sepToCheck <- paste0( sepToCheck, gsub('"',"",i),"|" )
}
sepToCheck
sepToCheck <- sepToCheck[-length(sepToCheck)]
sepToCheck
length(sepToCheck)
sepToCheck <- character()
for (i in separators) {
sepToCheck <- paste0( sepToCheck, gsub('"',"",i),"|" )
}
length(sepToCheck)
sepToCheck[5]
nchar(sepToCheck)-1
substr(sepToCheck,nchar(sepToCheck)-1)
substr(sepToCheck,1,nchar(sepToCheck)-1)
sepToCheck
col <- read.table("~/data/Classeur1.txt", sep="\t", h=F,stringsAsFactors = F)
dim(col)
col <- col[,1]
# check the separators
inputUser <- ","
separators <- c(' ', '.', ",", "_", ";", "-")
separators <- separators[-which(inputUser == separators)]
sepToCheck <- character()
for (i in separators) {
sepToCheck <- paste0( sepToCheck, gsub('"',"",i),"|" )
}
sepToCheck <- substr(sepToCheck,1,nchar(sepToCheck)-1)
sepToCheck <- gsub("\\.", "\\\\.", sepToCheck)
sepToCheck
sapply(col, function(x) strsplit(x, sepToCheck))
liste <- sapply(col, function(x) strsplit(x, sepToCheck))
which(length(liste)>1)
length(liste)
lengths(liste)
which(lengths(liste)>1)
inputUser <- ";"
separators <- c(' ', '.', ",", "_", ";", "-")
separators <- separators[-which(inputUser == separators)]
sepToCheck <- character()
for (i in separators) {
sepToCheck <- paste0( sepToCheck, gsub('"',"",i),"|" )
}
sepToCheck <- substr(sepToCheck,1,nchar(sepToCheck)-1)
sepToCheck <- gsub("\\.", "\\\\.", sepToCheck)
liste <- sapply(col, function(x) strsplit(x, sepToCheck))
which(lengths(liste)>1)
inputUser <- "."
separators <- c(' ', '.', ",", "_", ";", "-")
separators <- separators[-which(inputUser == separators)]
sepToCheck <- character()
for (i in separators) {
sepToCheck <- paste0( sepToCheck, gsub('"',"",i),"|" )
}
sepToCheck <- substr(sepToCheck,1,nchar(sepToCheck)-1)
sepToCheck <- gsub("\\.", "\\\\.", sepToCheck)
liste <- sapply(col, function(x) strsplit(x, sepToCheck))
which(lengths(liste)>1)
inputUser <- " "
separators <- c(' ', '.', ",", "_", ";", "-")
separators <- separators[-which(inputUser == separators)]
sepToCheck <- character()
for (i in separators) {
sepToCheck <- paste0( sepToCheck, gsub('"',"",i),"|" )
}
sepToCheck <- substr(sepToCheck,1,nchar(sepToCheck)-1)
sepToCheck <- gsub("\\.", "\\\\.", sepToCheck)
liste <- sapply(col, function(x) strsplit(x, sepToCheck))
which(lengths(liste)>1)
if (length(which(lengths(liste)>1))>1) {
"Others separators exist"
}
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
