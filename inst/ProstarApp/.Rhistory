Prostar_desc
library(Prostar)
Prostar_desc <- gsub("[^0-9.]","",packageDescription("Prostar")$Depends)
Prostar_desc
#Prostar_desc <- gsub("[^0-9.]","",packageDescription("Prostar")$Depends)
Prostar_desc <- "3.6"
currentRversion <- gsub("[^0-9.]","", (strsplit(R.Version()[['version.string']],"\\("))[[1]][1])
(currentRversion < Prostar_desc)
currentRversion
Prostar_desc
#Prostar_desc <- gsub("[^0-9.]","",packageDescription("Prostar")$Depends)
Prostar_desc <- "3.7"
currentRversion <- gsub("[^0-9.]","", (strsplit(R.Version()[['version.string']],"\\("))[[1]][1])
(currentRversion < Prostar_desc)
shiny::runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
"3.6.2"<"3.6.3"
"3.6.2"<"3.7.3"
"3.6.2"<"3.4.3"
"3.6.2"<"3.7.1"
"3.6.2"<"3.6.1"
currentRversion
Prostar_desc
runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
Prostar::version()
R.version.string
gsub("[^0-9.]","", (strsplit(R.Version.string,"\\("))[[1]][1])
R.Version.string
R.version.string
strsplit(R.version.string,"\\(")
(strsplit(R.version.string,"\\("))[[1]][1]
maintainer("Prostar")
runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
daparVersion <- installed.packages(lib.loc=DAPAR.loc)["DAPAR","Version"]
ProstarVersion <- installed.packages(lib.loc=Prostar.loc)["Prostar","Version"]
daparVersion <- installed.packages(lib.loc=DAPAR.loc)["DAPAR","Version"]
ProstarVersion <- installed.packages(lib.loc=Prostar.loc)["Prostar","Version"]
daparVersion <- installed.packages(lib.loc=DAPAR.loc)["DAPAR","Version"]
daparVersion
ProstarVersion
Prostar.html <- readHTMLTable("http://bioconductor.org/packages/release/bioc/html/Prostar.html")
DAPAR.html <- readHTMLTable("http://bioconductor.org/packages/release/bioc/html/DAPAR.html")
DAPARdata.html <- readHTMLTable("http://bioconductor.org/packages/release/data/experiment/html/DAPARdata.html")
DAPAR.version <-as.character(DAPAR.html[[3]][2][1,])
Prostar.version <-as.character(Prostar.html[[3]][2][1,])
DAPAR.version
Prostar.version
getPackagesVersions2(Prostar)
getPackagesVersions2 <- function(){
type <- "all"
outOfDate <- "(Out of date)"
dev <- "(Devel)"
biocRelease <- NULL
DAPARdata.version <- NULL
tryCatch({
#biocRelease <- available.packages(contrib.url("http://bioconductor.org/packages/release/bioc/"))
require(XML)
Prostar.html <- readHTMLTable("http://bioconductor.org/packages/release/bioc/html/Prostar.html")
DAPAR.html <- readHTMLTable("http://bioconductor.org/packages/release/bioc/html/DAPAR.html")
DAPARdata.html <- readHTMLTable("http://bioconductor.org/packages/release/data/experiment/html/DAPARdata.html")
DAPAR.version <-as.character(DAPAR.html[[3]][2][1,])
Prostar.version <-as.character(Prostar.html[[3]][2][1,])
DAPARdata.version <- as.character(DAPARdata.html[[3]][2][1,])
}, warning = function(w) {
return()
}, error = function(e) {
return()
}, finally = {
#cleanup-code
})
pkgs <- c("Prostar", "DAPAR", "DAPARdata")
loc.pkgs <-c("Prostar.loc", "DAPAR.loc", "DAPARdata.loc")
instPkgs <- list(Prostar = installed.packages(lib.loc=Prostar.loc)["Prostar","Version"],
DAPAR = installed.packages(lib.loc=DAPAR.loc)["DAPAR","Version"],
DAPARdata = installed.packages(lib.loc=DAPARdata.loc)["DAPARdata","Version"])
names <- c(as.character(tags$a(href="http://www.bioconductor.org/packages/release/bioc/html/Prostar.html", "Prostar")),
as.character(tags$a(href="http://www.bioconductor.org/packages/release/bioc/html/DAPAR.html", "DAPAR")),
as.character(tags$a(href="http://www.bioconductor.org/packages/release/data/experiment/html/DAPARdata.html", "DAPARdata")))
df <- data.frame("Name" = names,
"Installed.packages"= rep(NA, 3),
"Bioc.release" =  rep(NA, 3),
"NeedsUpdate"= rep(FALSE,3),
stringsAsFactors = FALSE)
df[, "Installed.packages"] <- unlist(instPkgs)
if (!is.null(Prostar.version) && !is.null(DAPAR.version)) {
tryCatch({
biocPkgs <- list(Prostar = Prostar.version,
DAPAR = DAPAR.version,
DAPARdata = DAPARdata.version)
if (compareVersion(instPkgs$Prostar,biocPkgs$Prostar) == 0){df[1,"Name"] <-  names[1]}
else if (compareVersion(instPkgs$Prostar,biocPkgs$Prostar) == 1){df[1,"Name"] <-   paste(names[1],  "<strong>",dev, "</strong>", sep=" ")}
else if (compareVersion(instPkgs$Prostar,biocPkgs$Prostar)==-1){
df[1,"Name"] <-   paste(names[1], "<strong>", outOfDate, "</strong>", sep=" ")
inst <- unlist(strsplit(instPkgs$Prostar, split=".", fixed=TRUE))
bioc <- unlist(strsplit(biocPkgs$Prostar, split=".", fixed=TRUE))
df[1,"NeedsUpdate"] <- ((inst[2]==bioc[2] && (as.numeric(inst[3]) < as.numeric(bioc[3]))))
}
if (compareVersion(instPkgs$DAPAR,biocPkgs$DAPAR) == 0){df[2,"Name"] <-  names[2]}
else if (compareVersion(instPkgs$DAPAR , biocPkgs$DAPAR) == 1){df[2,"Name"] <-   paste(names[2],  "<strong>",dev, "</strong>", sep=" ")}
else if (compareVersion(instPkgs$DAPAR , biocPkgs$DAPAR)==-1){
df[2,"Name"] <-   paste(names[2],  "<strong>",outOfDate, "</strong>", sep=" ")
inst <- unlist(strsplit(instPkgs$DAPAR, split=".", fixed=TRUE))
bioc <- unlist(strsplit(biocPkgs$DAPAR, split=".", fixed=TRUE))
df[2,"NeedsUpdate"] <- ((inst[2]==bioc[2] && (as.numeric(inst[3]) < as.numeric(bioc[3]))))
}
if (compareVersion(instPkgs$DAPARdata,biocPkgs$DAPARdata) == 0){df[3,"Name"] <-  names[3]}
else if (compareVersion(instPkgs$DAPARdata , biocPkgs$DAPARdata) == 1){df[3,"Name"] <-   paste(names[3],  "<strong>",dev, "</strong>", sep=" ")}
else if (compareVersion(instPkgs$DAPARdata , biocPkgs$DAPARdata)==-1){
df[3,"Name"] <-   paste(names[3],  "<strong>",outOfDate, "</strong>", sep=" ")
inst <- unlist(strsplit(instPkgs$DAPARdata, split=".", fixed=TRUE))
bioc <- unlist(strsplit(biocPkgs$DAPARdata, split=".", fixed=TRUE))
df[3,"NeedsUpdate"] <- ((inst[2]==bioc[2] && (as.numeric(inst[3]) < as.numeric(bioc[3]))))
}
df[, "Bioc.release"] <- unlist(biocPkgs)
}, warning = function(w) {
return()
}, error = function(e) {
return()
}, finally = {
#cleanup-code
})
}
colnames(df) <- c("Names", "Installed packages", "Bioc release","NeedsUpdate")
switch(type,
all=df <- df,
installed = {
df <- df[,1:2]
df[,1] <- c('Prostar', 'DAPAR', 'DAPARdata')
}
)
print(df)
df
#}
}
getPackagesVersions2(Prostar)
getPackagesVersions2()
daparUserVersion
daparUserVersion <- installed.packages(lib.loc=DAPAR.loc)["DAPAR","Version"]
ProstarUserVersion <- installed.packages(lib.loc=Prostar.loc)["Prostar","Version"]
Prostar.html <- readHTMLTable("http://bioconductor.org/packages/release/bioc/html/Prostar.html")
DAPAR.html <- readHTMLTable("http://bioconductor.org/packages/release/bioc/html/DAPAR.html")
daparBiocversion <-as.character(DAPAR.html[[3]][2][1,])
ProstarBiocversion <-as.character(Prostar.html[[3]][2][1,])
daparUserVersion
daparBiocversion
ProstarBiocversion
ProstarUserVersion
runApp('Prostar/inst/ProstarApp')
(ProstarUserVersion > ProstarBiocversion)
runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
daparUserVersion
daparBiocversion
daparUserVersion > daparBiocversion
runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
daparUserVersion
ProstarUserVersion
daparUserVersion
ProstarUserVersion
daparUserVersion
daparBiocversion
ProstarUserVersion
runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
daparUserVersion
daparBiocversion
ProstarUserVersion
ProstarBiocversion
runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
paste0(". You are using version",
daparUserVersion, ". Please go to Prostar web site (",
tags$a("http://www.prostar-proteomics.org/#zero-install", href="http://www.prostar-proteomics.org/#zero-install", target="_blank"),
").")
paste0(". You are using version ",
daparUserVersion, ". Please go to Prostar web site (",
tags$a("http://www.prostar-proteomics.org/#zero-install", href="http://www.prostar-proteomics.org/#zero-install", target="_blank"),
").")
paste0(". You are using version ",
daparUserVersion, ". Please go to Prostar web site (")
runApp('Prostar/inst/ProstarApp')
paste0("DAPAR last bioconductor version is",
tags$b(daparBiocversion),
". You are using version ",
daparUserVersion, ". Please go to Prostar web site (")
runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
ProstarBiocversion
daparBiocversion
runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
ui <- fluidPage(
p("The first radio button group controls the second"),
radioButtons("inRadioButtons", "Input radio buttons",
c("Item A", "Item B", "Item C")),
radioButtons("inRadioButtons2", "Input radio buttons 2",
c("Item A", "Item B", "Item C"))
)
server <- function(input, output, session) {
observe({
x <- input$inRadioButtons
# Can also set the label and select items
updateRadioButtons(session, "inRadioButtons2",
label = paste("radioButtons label", x),
choices = x,
selected = x
)
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
p("The first radio button group controls the second"),
radioButtons("inRadioButtons", "Input radio buttons",
c("Item A", "Item B", "Item C")),
radioButtons("inRadioButtons2", "Input radio buttons 2",
c("Item A", "Item B", "Item C"))
)
server <- function(input, output, session) {
observe({
x <- input$inRadioButtons
# Can also set the label and select items
updateRadioButtons(session, "inRadioButtons2",
label = paste("radioButtons label", x),
choices = x,
selected = x
)
})
}
shinyApp(ui, server)
options(shiny.reactlog=TRUE)
shiny::runApp('Prostar/inst/ProstarApp')
rv$widgets$anaDiff$filterType
rv$widgets$anaDiff
View(df)
input$swapVolcano
rv$resAnaDiff$logFC
rv$resAnaDiff$logFC
input$selectComparison
rv$widgets$anaDiff$Comparison
input$selectComparison
rv_anaDiff$filename
rv$widgets$anaDiff$Comparison
rv$widgets$anaDiff$filterType
rv$widgets$anaDiff$filterType
rv$widgets$anaDiff$Comparison
rv$widgets$anaDiff$Comparison
rv$widgets$anaDiff$filterType
rv$widgets$anaDiff
rv$widgets$anaDiff$Comparison == "None"
colnames(fData(rv$current.obj))
rv$widgets$anaDiff$tooltipInfo
data()$logFC
length(which(is.na(Biobase::exprs(rv$current.obj)))) > 0
which(is.na(Biobase::exprs(rv$current.obj)))
Biobase::exprs(rv$current.obj)
gFilterNone
debugSource('~/Github/Prostar/inst/ProstarApp/server/srv_AnaDiff.R')
debugSource('~/Github/Prostar/inst/ProstarApp/server/srv_AnaDiff.R')
runApp('Prostar/inst/ProstarApp')
View(df)
View(df)
rv$resAnaDiff$logFC
rv$resAnaDiff
rv$widgets$anaDiff$Comparison
runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
install.packages("~/Github/DAPAR_1.19.14.tar.gz", repo=NULL, type="source")
library(installr)
uninstall.packages("DAPAR")
install.packages("~/Github/DAPAR_1.19.14.tar.gz", repo=NULL, type="source")
install.Rtools()
shiny::runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
shiny::runApp('Prostar/inst/ProstarApp')
shiny::runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
shiny::runApp('Prostar/inst/ProstarApp')
shiny::runApp('Prostar/inst/ProstarApp')
Biobase::fData(rv$current.obj)[,rv$current.obj@experimentData@other$proteinId]
rv$widgets$normalization$method
rv$dataset[[input$datasets]]
runApp('Prostar/inst/ProstarApp')
rv$dataset[[input$datasets]]
class(rv$dataset[[input$datasets]])
rv$widgets$normalization$method
class(rv$widgets$normalization$method)
rv$widgets$normalization$type
class(rv$widgets$normalization$type)
rv$widgets$normalization$varReduction
class(rv$widgets$normalization$varReduction)
quant
as.numeric(rv$widgets$normalization$quantile)
class(as.numeric(rv$widgets$normalization$quantile))
as.numeric(input$spanLOESS)
class(as.numeric(input$spanLOESS))
GetIndicesOfSelectedProteins()
n
shiny::runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
rv.norm$trackFromBoxplot()
(rv.norm$trackFromBoxplot()$type)
Biobase::fData(rv$current.obj)[,rv$current.obj@experimentData@other$proteinId]
rv.norm$trackFromBoxplot()$type
rv.norm$trackFromBoxplot()$list.indices
rv.norm$trackFromBoxplot()
is.null(rv.norm$trackFromBoxplot()$type)
rv.norm$trackFromBoxplot()$type
ind
ll
tt
ProteinList
Random
ind
ind
length(ind)==0
ind
ind
runApp('Prostar/inst/ProstarApp')
runApp()
runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
print(input$typeSelect)
runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
shiny::runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
shiny::runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
rv$matAdj
runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
shiny::runApp()
runApp()
rv$imputePlotsSteps[["step0"]]
length(which(is.na(Biobase::exprs(rv$current.obj))==TRUE))
rv$widgets$proteinImput$POV_algorithm
findMECBlock(rv$current.obj)
rv$MECIndex
rv$current.obj
nbMVBefore
rv$MECIndex
rv$current.obj
rv$current.obj
nbMVAfter
rv$nbPOVimputed
nbMVBefore
nbMVAfter
rv$imputePlotsSteps[["step1"]]
shiny::runApp()
runApp()
rv$widgets$proteinImput$POV_algorithm
nbMVAfter
rv$nbPOVimputed
algo
shiny::runApp()
runApp()
fichiers <- list.files("~/Github/Prostar_master/inst/ProstarApp/characters/")
for (f in fichiers) {
print(f)
source(paste0("~/Github/Prostar_master/inst/ProstarApp/characters/",f))
}
runApp()
fichiers <- list.files("~/Github/master/Prostar/inst/ProstarApp/characters/")
for (f in fichiers) {
print(f)
source(paste0("~/Github/master/Prostar/inst/ProstarApp/characters/",f))
}
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source('~/Github/master/Prostar/inst/ProstarApp/server/srv_ModulesSrv.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
fichiers <- list.files("~/Github/master/Prostar/inst/ProstarApp/characters/")
for (f in fichiers) {
print(f)
source(paste0("~/Github/master/Prostar/inst/ProstarApp/characters/",f))
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
fichiers <- list.files("~/Github/master/Prostar/inst/ProstarApp/characters/")
for (f in fichiers) {
print(f)
source(paste0("~/Github/master/Prostar/inst/ProstarApp/characters/",f))
}
runApp()
fichiers <- list.files("~/Github/master/Prostar/inst/ProstarApp/characters/")
for (f in fichiers) {
print(f)
source(paste0("~/Github/master/Prostar/inst/ProstarApp/characters/",f))
}
runApp()
runApp()
fichiers <- list.files("~/Github/master/Prostar/inst/ProstarApp/characters/")
for (f in fichiers) {
print(f)
source(paste0("~/Github/master/Prostar/inst/ProstarApp/characters/",f))
}
fichiers <- list.files("~/Github/master/Prostar_char/inst/ProstarApp/characters/")
for (f in fichiers) {
print(f)
source(paste0("~/Github/master/Prostar_char/inst/ProstarApp/characters/",f))
}
shiny::runApp()
runApp()
runApp()
runApp('~/Github/master/Prostar/inst/ProstarApp')
runApp('~/Github/master/Prostar/inst/ProstarApp')
runApp('~/Github/master/Prostar/inst/ProstarApp')
runApp('~/Github/master/Prostar/inst/ProstarApp')
runApp('~/Github/master/Prostar/inst/ProstarApp')
runApp('~/Github/master/Prostar/inst/ProstarApp')
runApp('~/Github/master/Prostar/inst/ProstarApp')
runApp('~/Github/master/Prostar/inst/ProstarApp')
runApp('~/Github/master/Prostar/inst/ProstarApp')
runApp('~/Github/master/Prostar/inst/ProstarApp')
runApp()
shiny::runApp('~/Github/master/Prostar/inst/ProstarApp')
runApp('~/Github/master/Prostar/inst/ProstarApp')
runApp('~/Github/master/Prostar/inst/ProstarApp')
runApp('~/Github/master/Prostar/inst/ProstarApp')
runApp('~/Github/master/Prostar/inst/ProstarApp')
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
p("The checkbox group controls the select input"),
checkboxGroupInput("inCheckboxGroup", "Input checkbox",
c("Item A", "Item B", "Item C")),
selectInput("inSelect", "Select input",
c("Item A", "Item B", "Item C"))
)
server <- function(input, output, session) {
observe({
x <- input$inCheckboxGroup
# Can use character(0) to remove all choices
if (is.null(x))
x <- character(0)
# Can also set the label and select items
updateSelectInput(session, "inSelect",
label = paste("Select input label", length(x)),
choices = x,
selected = tail(x, 1)
)
})
}
shinyApp(ui, server)
runApp('~/Github/master/Prostar/inst/ProstarApp')
runApp('~/Github/master/Prostar/inst/ProstarApp')
runApp()
runApp('~/Github/master/Prostar/inst/ProstarApp')
