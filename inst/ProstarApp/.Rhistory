return(res)
}
showDatasets <- function(res, tour,  size){
data <- res[[paste0('tour', tour)]]
for (i in 1:length(names(data))){
print(paste0('---------',names(data)[i] ,'---------' ))
print(exprs(data[[i]])[size,])
}
}
#------------------------------------------------------------
# Tests
#------------------------------------------------------------
data("Exp1_R25_pept")
ll <- realData(Exp1_R25_pept,plusCdt = 1, plusRep = 0)
colnames(exprs(ll))
pData(ll)
# line 13 of condition A1 <- 100 to see if imputation accurated
exprs(ll)[14,1] <- 50
mixDatasetArgs <- list(do.interC=TRUE, do.intraC=TRUE, do.fullRandom=FALSE)
start_time <- Sys.time()
res.1 <- test_imputation(nTest=3,genDatasetArgs , mixDatasetArgs, realData = T, data = ll)
end_time <- Sys.time()
end_time - start_time
start_time <- Sys.time()
mixDatasetArgs <- list(do.interC=TRUE, do.intraC=TRUE, do.fullRandom=TRUE)
res.2 <- test_imputation(nTest=3,genDatasetArgs , mixDatasetArgs, realData = T, data = ll)
end_time <- Sys.time()
end_time - start_time
# testS
#summary(res.1)
showDatasets(res.1,1,5:16)
# testS
#summary(res.1)
showDatasets(res.1,2,5:16)
# testS
#summary(res.1)
showDatasets(res.1,3,5:16)
showDatasets(res.1,1,20:23)
showDatasets(res.1,2,20:23)
# testS
#summary(res.1)
showDatasets(res.2,3,5:16)
# testS
#summary(res.1)
showDatasets(res.2,2,5:16)
# testS
#summary(res.1)
showDatasets(res.2,1,5:16)
showDatasets(res.2,3,20:23)
showDatasets(res.2,2,20:23)
ll <- realData(Exp1_R25_pept,plusCdt = 1, plusRep = 4)
pData(ll)
ll <- realData(Exp1_R25_pept,plusCdt = 2, plusRep = 3)
pData(ll)
# line 13 of condition A1 <- 100 to see if imputation accurated
exprs(ll)[14,1] <- 50
#genDatasetArgs <- list(nbCond=3, nRep=3, mismatch.nRep=TRUE, prop.MV = 0.4,  prop.MEC=0.3, prop.POV=0.7,size = 5000)
mixDatasetArgs <- list(do.interC=TRUE, do.intraC=TRUE, do.fullRandom=FALSE)
start_time <- Sys.time()
res.1 <- test_imputation(nTest=1,genDatasetArgs , mixDatasetArgs, realData = T, data = ll)
end_time <- Sys.time()
end_time - start_time
# testS
#summary(res.1)
showDatasets(res.2,1,5:16)
pData(ll)
# testS
#summary(res.1)
showDatasets(res.1,1,5:16)
install.packages("~/Github/DAPAR_1.19.13.tar.gz", repos = NULL, type = "source")
library(DAPAR)
##' Prostar : a GUI for DAPAR
##'
##' @title Prostar
##' @return A new window in the default internet browser
##' @author Samuel Wieczorek
##' @examples
##' if(interactive()) {Prostar()}
Prostar <-
function(){
G <- .GlobalEnv
if (interactive()){
options(shiny.maxRequestSize=1024^3)
a=shiny::runApp(system.file("ProstarApp",package="Prostar"),
launch.browser = TRUE)
return(invisible(a))
} else {return (NULL)}
}
require(shiny)
folder_address = 'C://Users//sw175264//Documents//Projets//Github//Prostar//inst//ProstarApp'
runApp(folder_address, launch.browser=TRUE)
library(DAPAR)
library(Prostar)
Prostar()
Prostar()
Prostar()
install.packages("BiocManager")
install.packages("Rtools")
system("type R")
R.home()
library(DAPAR)
browseVignettes("DAPAR")
BiocStyle::latex()
latex()
BiocStyle::latex()
BiocStyle::latex()
BiocStyle::latex()
install.packages("RSQLite")
install.packages("RSQLite")
insatall.packages(Rtools)
install.packages(Rtools)
install.packages("Rtools")
install.packages('installr')
library(installr)
install.Rtools(choose_version = T)
install.Rtools()
library(installr)
install.Rtools()
install.packages(c("BH", "cli", "fansi", "farver", "hms", "RSQLite"))
install.packages("fansi")
install.Rtools()
library(installr)
install.Rtools()
install.Rtools()
install.packages("fansi")
install.packages("fansi")
install.packages("fansi")
install.packages("fansi")
install.packages("fansi")
library(Prostar)
library(DAPAR)
BiocManager::install('BiocStyle')
library(BiocStyle)
library(Prostar)
library(impu)
library(impute)
install.packages(c("fansi", "farver", "mvtnorm", "RSQLite", "stringi"))
install.packages("RSQLite")
install.packages("pkgbuild")
install.packages("devtools")
Sys.getenv('PATH')
Sys.getenv('PATH')[1]
install.packages("stringi")
install.packages("stringi")
Sys.getenv('PATH')
Sys.setenv(PATH = paste(Sys.getenv("PATH"), "C:\\Users\\EF249002\\Documents\\R\\Rtools\\mingw64\\@bin", sep = ";"))
Sys.getenv('PATH')
Sys.setenv(PATH = "C:\\Users\\EF249002\\Documents\\R\\R-devel\\bin\\x64;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\Program Files (x86)\\Intel\\iCLS Client\\;C:\\Program Files\\Intel\\iCLS Client\\;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files\\PuTTY\\;C:\\Program Files\\SafeNet\\Authentication\\SAC\\x64;C:\\Program Files\\SafeNet\\Authentication\\SAC\\x32;C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\DAL;C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\IPT;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\DAL;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\IPT;C:\\Program Files\\MiKTeX 2.9\\miktex\\bin\\x64\\;C:\\Users\\EF249002\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Users\\EF249002\\AppData\\Local\\Programs\\Git\\cmd;C:\\Users\\EF249002\\Documents\\R\\R-3.6.1\\bin\\x64;;C:\\Users\\EF249002\\Documents\\R\\Rtools\\mingw64\\bin")
Sys.getenv('PATH')
install.packages("stringi")
install.packages("stringi")
install.packages("stringi")
library(installr)
install.packages("stringi")
library(installr)
install.packages("stringi")
install.packages("stringi")
install.packages("stringi")
install.packages("stringi")
library(installr)
install.packages(c("fansi", "farver", "mvtnorm", "RSQLite", "stringi"))
Sys.getenv('PATH')
Sys.setenv(PATH = paste("C:/Users/EF249002/Documents/R/rtools40/mingw64/bin", Sys.getenv('PATH'), sep = ";"))
Sys.setenv(PATH = paste("C:/Users/EF249002/Documents/R/rtools40/mingw32/bin", Sys.getenv('PATH'), sep = ";"))
Sys.setenv(BINPREF = "C:/Users/EF249002/Documents/R/rtools40/mingw64/bin")
install.packages("fansi")
devtools::install()
library(impute)
install.packages("impute")
install.packages("impute")
BiocManager::install("impute")
BiocManager::install("impute")
BiocManager::install("fansi")
BiocManager::install("farver")
BiocManager::install("MSnbase")
install.packages("BiocManager")
library(BiocManager)
install.packages("BiocLite")
source("https://bioconductor.org/biocLite.R")
library(BiocManager)
library(BiocLite)
BiocManager::install("Prostar")
library(Prostar)
library(BiocManager)
BiocManager::install("Prostar")
shiny::runApp('Prostar/inst/ProstarApp')
Prostar_desc <- gsub("[^0-9.]","",packageDescription("Prostar")$Depends)
currentRversion <- gsub("[^0-9.]","", (strsplit(R.Version()[['version.string']],"\\("))[[1]][1])
Prostar_desc
currentRversion
currentRversion
Prostar_desc <- gsub("[^0-9.]","",packageDescription("Prostar")$Depends)
Prostar_desc
Prostar_desc <- gsub("[^0-9.]","",packageDescription("Prostar")$Depends)
Prostar_desc
library(Prostar)
Prostar_desc <- gsub("[^0-9.]","",packageDescription("Prostar")$Depends)
Prostar_desc
#Prostar_desc <- gsub("[^0-9.]","",packageDescription("Prostar")$Depends)
Prostar_desc <- "3.6"
currentRversion <- gsub("[^0-9.]","", (strsplit(R.Version()[['version.string']],"\\("))[[1]][1])
(currentRversion < Prostar_desc)
currentRversion
Prostar_desc
#Prostar_desc <- gsub("[^0-9.]","",packageDescription("Prostar")$Depends)
Prostar_desc <- "3.7"
currentRversion <- gsub("[^0-9.]","", (strsplit(R.Version()[['version.string']],"\\("))[[1]][1])
(currentRversion < Prostar_desc)
shiny::runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
"3.6.2"<"3.6.3"
"3.6.2"<"3.7.3"
"3.6.2"<"3.4.3"
"3.6.2"<"3.7.1"
"3.6.2"<"3.6.1"
currentRversion
Prostar_desc
runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
Prostar::version()
R.version.string
gsub("[^0-9.]","", (strsplit(R.Version.string,"\\("))[[1]][1])
R.Version.string
R.version.string
strsplit(R.version.string,"\\(")
(strsplit(R.version.string,"\\("))[[1]][1]
maintainer("Prostar")
runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
daparVersion <- installed.packages(lib.loc=DAPAR.loc)["DAPAR","Version"]
ProstarVersion <- installed.packages(lib.loc=Prostar.loc)["Prostar","Version"]
daparVersion <- installed.packages(lib.loc=DAPAR.loc)["DAPAR","Version"]
ProstarVersion <- installed.packages(lib.loc=Prostar.loc)["Prostar","Version"]
daparVersion <- installed.packages(lib.loc=DAPAR.loc)["DAPAR","Version"]
daparVersion
ProstarVersion
Prostar.html <- readHTMLTable("http://bioconductor.org/packages/release/bioc/html/Prostar.html")
DAPAR.html <- readHTMLTable("http://bioconductor.org/packages/release/bioc/html/DAPAR.html")
DAPARdata.html <- readHTMLTable("http://bioconductor.org/packages/release/data/experiment/html/DAPARdata.html")
DAPAR.version <-as.character(DAPAR.html[[3]][2][1,])
Prostar.version <-as.character(Prostar.html[[3]][2][1,])
DAPAR.version
Prostar.version
getPackagesVersions2(Prostar)
getPackagesVersions2 <- function(){
type <- "all"
outOfDate <- "(Out of date)"
dev <- "(Devel)"
biocRelease <- NULL
DAPARdata.version <- NULL
tryCatch({
#biocRelease <- available.packages(contrib.url("http://bioconductor.org/packages/release/bioc/"))
require(XML)
Prostar.html <- readHTMLTable("http://bioconductor.org/packages/release/bioc/html/Prostar.html")
DAPAR.html <- readHTMLTable("http://bioconductor.org/packages/release/bioc/html/DAPAR.html")
DAPARdata.html <- readHTMLTable("http://bioconductor.org/packages/release/data/experiment/html/DAPARdata.html")
DAPAR.version <-as.character(DAPAR.html[[3]][2][1,])
Prostar.version <-as.character(Prostar.html[[3]][2][1,])
DAPARdata.version <- as.character(DAPARdata.html[[3]][2][1,])
}, warning = function(w) {
return()
}, error = function(e) {
return()
}, finally = {
#cleanup-code
})
pkgs <- c("Prostar", "DAPAR", "DAPARdata")
loc.pkgs <-c("Prostar.loc", "DAPAR.loc", "DAPARdata.loc")
instPkgs <- list(Prostar = installed.packages(lib.loc=Prostar.loc)["Prostar","Version"],
DAPAR = installed.packages(lib.loc=DAPAR.loc)["DAPAR","Version"],
DAPARdata = installed.packages(lib.loc=DAPARdata.loc)["DAPARdata","Version"])
names <- c(as.character(tags$a(href="http://www.bioconductor.org/packages/release/bioc/html/Prostar.html", "Prostar")),
as.character(tags$a(href="http://www.bioconductor.org/packages/release/bioc/html/DAPAR.html", "DAPAR")),
as.character(tags$a(href="http://www.bioconductor.org/packages/release/data/experiment/html/DAPARdata.html", "DAPARdata")))
df <- data.frame("Name" = names,
"Installed.packages"= rep(NA, 3),
"Bioc.release" =  rep(NA, 3),
"NeedsUpdate"= rep(FALSE,3),
stringsAsFactors = FALSE)
df[, "Installed.packages"] <- unlist(instPkgs)
if (!is.null(Prostar.version) && !is.null(DAPAR.version)) {
tryCatch({
biocPkgs <- list(Prostar = Prostar.version,
DAPAR = DAPAR.version,
DAPARdata = DAPARdata.version)
if (compareVersion(instPkgs$Prostar,biocPkgs$Prostar) == 0){df[1,"Name"] <-  names[1]}
else if (compareVersion(instPkgs$Prostar,biocPkgs$Prostar) == 1){df[1,"Name"] <-   paste(names[1],  "<strong>",dev, "</strong>", sep=" ")}
else if (compareVersion(instPkgs$Prostar,biocPkgs$Prostar)==-1){
df[1,"Name"] <-   paste(names[1], "<strong>", outOfDate, "</strong>", sep=" ")
inst <- unlist(strsplit(instPkgs$Prostar, split=".", fixed=TRUE))
bioc <- unlist(strsplit(biocPkgs$Prostar, split=".", fixed=TRUE))
df[1,"NeedsUpdate"] <- ((inst[2]==bioc[2] && (as.numeric(inst[3]) < as.numeric(bioc[3]))))
}
if (compareVersion(instPkgs$DAPAR,biocPkgs$DAPAR) == 0){df[2,"Name"] <-  names[2]}
else if (compareVersion(instPkgs$DAPAR , biocPkgs$DAPAR) == 1){df[2,"Name"] <-   paste(names[2],  "<strong>",dev, "</strong>", sep=" ")}
else if (compareVersion(instPkgs$DAPAR , biocPkgs$DAPAR)==-1){
df[2,"Name"] <-   paste(names[2],  "<strong>",outOfDate, "</strong>", sep=" ")
inst <- unlist(strsplit(instPkgs$DAPAR, split=".", fixed=TRUE))
bioc <- unlist(strsplit(biocPkgs$DAPAR, split=".", fixed=TRUE))
df[2,"NeedsUpdate"] <- ((inst[2]==bioc[2] && (as.numeric(inst[3]) < as.numeric(bioc[3]))))
}
if (compareVersion(instPkgs$DAPARdata,biocPkgs$DAPARdata) == 0){df[3,"Name"] <-  names[3]}
else if (compareVersion(instPkgs$DAPARdata , biocPkgs$DAPARdata) == 1){df[3,"Name"] <-   paste(names[3],  "<strong>",dev, "</strong>", sep=" ")}
else if (compareVersion(instPkgs$DAPARdata , biocPkgs$DAPARdata)==-1){
df[3,"Name"] <-   paste(names[3],  "<strong>",outOfDate, "</strong>", sep=" ")
inst <- unlist(strsplit(instPkgs$DAPARdata, split=".", fixed=TRUE))
bioc <- unlist(strsplit(biocPkgs$DAPARdata, split=".", fixed=TRUE))
df[3,"NeedsUpdate"] <- ((inst[2]==bioc[2] && (as.numeric(inst[3]) < as.numeric(bioc[3]))))
}
df[, "Bioc.release"] <- unlist(biocPkgs)
}, warning = function(w) {
return()
}, error = function(e) {
return()
}, finally = {
#cleanup-code
})
}
colnames(df) <- c("Names", "Installed packages", "Bioc release","NeedsUpdate")
switch(type,
all=df <- df,
installed = {
df <- df[,1:2]
df[,1] <- c('Prostar', 'DAPAR', 'DAPARdata')
}
)
print(df)
df
#}
}
getPackagesVersions2(Prostar)
getPackagesVersions2()
daparUserVersion
daparUserVersion <- installed.packages(lib.loc=DAPAR.loc)["DAPAR","Version"]
ProstarUserVersion <- installed.packages(lib.loc=Prostar.loc)["Prostar","Version"]
Prostar.html <- readHTMLTable("http://bioconductor.org/packages/release/bioc/html/Prostar.html")
DAPAR.html <- readHTMLTable("http://bioconductor.org/packages/release/bioc/html/DAPAR.html")
daparBiocversion <-as.character(DAPAR.html[[3]][2][1,])
ProstarBiocversion <-as.character(Prostar.html[[3]][2][1,])
daparUserVersion
daparBiocversion
ProstarBiocversion
ProstarUserVersion
runApp('Prostar/inst/ProstarApp')
(ProstarUserVersion > ProstarBiocversion)
runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
daparUserVersion
daparBiocversion
daparUserVersion > daparBiocversion
runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
daparUserVersion
ProstarUserVersion
daparUserVersion
ProstarUserVersion
daparUserVersion
daparBiocversion
ProstarUserVersion
runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
daparUserVersion
daparBiocversion
ProstarUserVersion
ProstarBiocversion
runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
paste0(". You are using version",
daparUserVersion, ". Please go to Prostar web site (",
tags$a("http://www.prostar-proteomics.org/#zero-install", href="http://www.prostar-proteomics.org/#zero-install", target="_blank"),
").")
paste0(". You are using version ",
daparUserVersion, ". Please go to Prostar web site (",
tags$a("http://www.prostar-proteomics.org/#zero-install", href="http://www.prostar-proteomics.org/#zero-install", target="_blank"),
").")
paste0(". You are using version ",
daparUserVersion, ". Please go to Prostar web site (")
runApp('Prostar/inst/ProstarApp')
paste0("DAPAR last bioconductor version is",
tags$b(daparBiocversion),
". You are using version ",
daparUserVersion, ". Please go to Prostar web site (")
runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
ProstarBiocversion
daparBiocversion
runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
ui <- fluidPage(
p("The first radio button group controls the second"),
radioButtons("inRadioButtons", "Input radio buttons",
c("Item A", "Item B", "Item C")),
radioButtons("inRadioButtons2", "Input radio buttons 2",
c("Item A", "Item B", "Item C"))
)
server <- function(input, output, session) {
observe({
x <- input$inRadioButtons
# Can also set the label and select items
updateRadioButtons(session, "inRadioButtons2",
label = paste("radioButtons label", x),
choices = x,
selected = x
)
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
p("The first radio button group controls the second"),
radioButtons("inRadioButtons", "Input radio buttons",
c("Item A", "Item B", "Item C")),
radioButtons("inRadioButtons2", "Input radio buttons 2",
c("Item A", "Item B", "Item C"))
)
server <- function(input, output, session) {
observe({
x <- input$inRadioButtons
# Can also set the label and select items
updateRadioButtons(session, "inRadioButtons2",
label = paste("radioButtons label", x),
choices = x,
selected = x
)
})
}
shinyApp(ui, server)
options(shiny.reactlog=TRUE)
shiny::runApp('Prostar/inst/ProstarApp')
rv$widgets$anaDiff$filterType
rv$widgets$anaDiff
View(df)
input$swapVolcano
rv$resAnaDiff$logFC
rv$resAnaDiff$logFC
input$selectComparison
rv$widgets$anaDiff$Comparison
input$selectComparison
rv_anaDiff$filename
rv$widgets$anaDiff$Comparison
rv$widgets$anaDiff$filterType
rv$widgets$anaDiff$filterType
rv$widgets$anaDiff$Comparison
rv$widgets$anaDiff$Comparison
rv$widgets$anaDiff$filterType
rv$widgets$anaDiff
rv$widgets$anaDiff$Comparison == "None"
colnames(fData(rv$current.obj))
rv$widgets$anaDiff$tooltipInfo
data()$logFC
length(which(is.na(Biobase::exprs(rv$current.obj)))) > 0
which(is.na(Biobase::exprs(rv$current.obj)))
Biobase::exprs(rv$current.obj)
gFilterNone
debugSource('~/Github/Prostar/inst/ProstarApp/server/srv_AnaDiff.R')
debugSource('~/Github/Prostar/inst/ProstarApp/server/srv_AnaDiff.R')
runApp('Prostar/inst/ProstarApp')
View(df)
View(df)
rv$resAnaDiff$logFC
rv$resAnaDiff
rv$widgets$anaDiff$Comparison
runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
install.packages("~/Github/DAPAR_1.19.14.tar.gz", repo=NULL, type="source")
library(installr)
uninstall.packages("DAPAR")
install.packages("~/Github/DAPAR_1.19.14.tar.gz", repo=NULL, type="source")
install.Rtools()
install.packages("~/Github/DAPAR_1.19.14.tar.gz", repo=NULL, type="source")
library(vctrs)
detach("package:vctrs", unload = TRUE)
library(installr)
uninstall.packages("vctrs")
install.packages("vctrs")
install.packages("vctrs")
install.packages("~/Github/DAPAR_1.19.14.tar.gz", repo=NULL, type="source")
library(DAPAR)
install.packages("~/Github/DAPAR_1.19.15.tar.gz", repo=NULL, type="source")
library(DAPAR)
shiny::runApp('Prostar/inst/ProstarApp')
setwd("DAPAR/")
roxygen2::roxygenize()
uninstall.packages("DAPAR")
library(installr)
uninstall.packages("DAPAR")
getwd()
roxygen2::roxygenize()
install.packages("~/Github/DAPAR_1.19.15.tar.gz", repo=NULL, type="source")
library(DAPAR)
shiny::runApp('~/Github/Prostar/inst/ProstarApp')
